import pygame
import math
import time

# 初始化
pygame.init()
screen = pygame.display.set_mode((800, 600))
clock = pygame.time.Clock()
font = pygame.font.SysFont(None, 36)

# 游戏参数
STAIRS_COUNT = 5  # 5个阶梯
STAIR_WIDTH = 50  # 每个阶梯的宽度
STAIR_HEIGHT = 20  # 阶梯高度
STAIRS = [
    {"x": 100, "y": 50, "freq": 0.5, "amp": 2},  # 阶梯1
    {"x": 250, "y": 50, "freq": 1.0, "amp": 1.5},  # 阶梯2
    {"x": 400, "y": 50, "freq": 1.5, "amp": 1},  # 阶梯3
    {"x": 550, "y": 50, "freq": 2.0, "amp": 0.5},  # 阶梯4
    {"x": 700, "y": 50, "freq": 2.5, "amp": 0.2}  # 阶梯5
]
PLAYER_X = 50
PLAYER_Y = 50
PLAYER_SPEED = 0  # 水平速度（初始0）
WATER_Y = 0  # 水底Y坐标
GAME_RUNNING = True
HAND_Y = 500  # 用于显示手部Y（初始值）
HAND_WIDTH = 0  # 用于显示手部宽度

# 游戏循环
while GAME_RUNNING:
    # 事件处理
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            GAME_RUNNING = False
    
    # 1. 更新阶梯Y坐标（动态下移）
    current_time = time.time() * 1000  # 毫秒时间戳
    for stair in STAIRS:
        # sin函数模拟波浪式运动（Y坐标）
        stair["y"] = 50 + stair["amp"] * math.sin(stair["freq"] * current_time)
    
    # 2. 检测手部动作（模拟用户挥手）
    # 实际中：用摄像头/手势识别库（如OpenCV），这里用虚拟数据
    # 为了演示，假设手部Y坐标随时间变化（越低越早跳）
    HAND_Y = 500 - (current_time % 200)  # 模拟手部Y坐标下降（0~500）
    HAND_WIDTH = 10 + (current_time % 100)  # 模拟手部宽度增加（0~20）

    # 3. 检测用户是否触发跳跃（手部Y低 + 手部宽度大）
    if HAND_Y < 300:  # 手部Y < 300 表示用户在“下移窗口期”
        # 计算跳跃距离（手部宽度 * 2）
        JUMP_DISTANCE = HAND_WIDTH * 2
        PLAYER_X += JUMP_DISTANCE  # 人物水平移动
        # 重置手部状态（避免重复跳跃）
        HAND_Y = 500
        HAND_WIDTH = 0

    # 4. 检查是否掉水（失败）
    if PLAYER_Y < WATER_Y:
        print("游戏失败！人物掉入水")
        GAME_RUNNING = False

    # 5. 绘制
    screen.fill((0, 0, 0))  # 黑色背景
    # 绘制阶梯
    for stair in STAIRS:
        pygame.draw.rect(screen, (0, 255, 0), (stair["x"], int(stair["y"]), STAIR_WIDTH, STAIR_HEIGHT))
    
    # 绘制人物
    pygame.draw.circle(screen, (255, 0, 0), (int(PLAYER_X), int(PLAYER_Y)), 10)
    
    # 显示手部信息（用于用户判断）
    text = font.render(f"手部Y: {int(HAND_Y)} | 跳跃距离: {int(JUMP_DISTANCE)}", True, (255, 255, 255))
    screen.blit(text, (10, 10))
    
    pygame.display.flip()
    clock.tick(60)

print("游戏结束")
pygame.quit()
